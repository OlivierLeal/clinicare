<h1 class="h1">Status da Solicitação</h1>
<div class="kanban-container">
  
  <div class="kanban-column" id="aguardando">
    <h2>Solicitação Recebida</h2>
    <%@services.each do |service|%>
        <% if service.status == "aguardando" %>
          <div class="kanban-item" draggable="true" id="<%= service.id%>"> Serviço - <b><%= service.call.title%></b>. Sua solicitação foi registrada</div>
        <%end%>
    <%end%>
    </div>
    <div class="kanban-column" id="em_processo">
        <h2>Em Andamento</h2>
      <%@services.each do |service|%>
        <% if service.status == "em_processo" %>
          <div class="kanban-item" draggable="true" value="<%= service.id%>"> Serviço - <b><%= service.call.title%></b>. O técnico iniciou o atendimento</div>
        <%end%>
      <%end%>
    </div>
    <div class="kanban-column" id="finalizado">
      <h2>Concluído</h2>
      <%@services.each do |service|%>
        <% if service.status == "finalizado" %>
            <div class="kanban-item" draggable="true" value="<%= service.id%>"> Serviço - <b><%= service.call.title%></b>. Sua solicitação foi concluída</div>
        <%end%>
      <%end%>
    </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
  function initDragAndDrop() {
    const items = document.querySelectorAll('.kanban-item');
    const columns = document.querySelectorAll('.kanban-column');
    
    items.forEach((item) => {
      item.addEventListener('dragstart', (e) => {
        e.dataTransfer.setData('text', e.target.id);
        setTimeout(() => e.target.classList.add('hidden'), 0);
      });
      
      item.addEventListener('dragend', (e) => {
        e.target.classList.remove('hidden');
      });
    });

    columns.forEach((column) => {
      column.addEventListener('dragover', (e) => {
        e.preventDefault(); 
        });

        column.addEventListener('drop', (e) => {
            e.preventDefault();
            const draggedId = e.dataTransfer.getData('text');
            const draggedElement = document.getElementById(draggedId);
            column.appendChild(draggedElement);
            fetch(`http://localhost:3000/atualizar_status?id=${draggedElement.getAttribute('value')}&status=${column.id}`)
            .then(response => {
              if (!response.ok) {
                throw new Error('Erro na requisição: ' + response.status);
              }
              return response.json();
            })
            .then(data => {
              console.log('Resposta do servidor:', data);
              switch (data.service.status) {
                case 'aguardando':
                  draggedElement.innerHTML = `Serviço - <b>${data.call.title}</b>. Sua solicitação foi registrada`;
                  break;
                case 'em_processo':
                  draggedElement.innerHTML = `Serviço - <b>${data.call.title}</b>. O técnico iniciou o atendimento`;
                  break;
                case 'finalizado':
                  draggedElement.innerHTML = `Serviço - <b>${data.call.title}</b>. Sua solicitação foi concluída`;
                  break;  
                default:
                  break;
              }
            })
            .catch(error => {
              console.error('Erro:', error); 
            });

          });
    });
  }
  document.querySelectorAll('.kanban-item').forEach((item, index) => {
      item.id = `item-${index}`;
  });
  initDragAndDrop();
});

</script>